services:
  # Databases
  # Auth DBs
  auth-mysql:
    image: mysql:8.3.0
    container_name: auth-mysql
    networks:
      - ecommerce
    ports:
      - 1248:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${AUTH_MYSQL_ROOT_PASSWORD}

  auth-mongodb:
    image: mongo:7.0.7
    container_name: auth-mongodb
    networks:
      - ecommerce
    ports:
      - "${AUTH_MONGO_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME= ${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD= ${MONGO_INITDB_ROOT_PASSWORD}

  auth-redis:
    image: redis:7.2.4-alpine
    container_name: auth-redis
    networks:
      - ecommerce
    ports:
      - "${AUTH_REDIS_PORT}:6379"

  #Broker
  broker:
    build:
      context: ../../
      dockerfile: ./docker/broker/Dockerfile
    container_name: broker
    image: ecommerce/broker
    networks:
      - ecommerce
    ports:
      - 8000:8000
    command: ["./app"]
    depends_on:
      - grafana

  #Authentication
  authentication:
    build:
      context: ../../
      dockerfile: ./docker/authentication/Dockerfile
    container_name: authentication
    image: ecommerce/authentication
    environment:
      - AUTH_PORT=${AUTH_PORT}
      - AUTH_MYSQL_ROOT_PASSWORD=${AUTH_MYSQL_ROOT_PASSWORD}
      - AUTH_MYSQL_PORT=${AUTH_MYSQL_PORT}
      - AUTH_MYSQL_HOST=${AUTH_MYSQL_HOST}
      - LOKI_HOST=${LOKI_HOST}
      - LOKI_PORT=${LOKI_PORT}
    networks:
      - ecommerce
    ports:
      - 8001:8001
    command: ["./app"]
    depends_on:
      - grafana

  # #Order
  # order:
  #   build:
  #     context: ../../
  #     dockerfile: ./docker/order/Dockerfile
  #   container_name: order
  #   image: ecommerce/order
  #   networks:
  #     - ecommerce
  #   ports:
  #     - 8002:8002
  #   command: ["./app"]
  #   depends_on:
  #     - grafana

  # #Payment
  # payment:
  #   build:
  #     context: ../../
  #     dockerfile: ./docker/payment/Dockerfile
  #   container_name: payment
  #   image: ecommerce/payment
  #   networks:
  #     - ecommerce
  #   ports:
  #     - 8003:8003
  #   command: ["./app"]
  #   depends_on:
  #     - grafana

  # #Product
  # product:
  #   build:
  #     context: ../../
  #     dockerfile: ./docker/product/Dockerfile
  #   container_name: product
  #   image: ecommerce/product
  #   networks:
  #     - ecommerce
  #   ports:
  #     - 8004:8004
  #   command: ["./app"]
  #   depends_on:
  #     - grafana

  #Frontend
  #Admin portal
  admin-portal:
    build:
      context: ../../
      dockerfile: ./docker/frontend/admin-portal/Dockerfile
    container_name: admin-portal
    image: ecommerce/admin-portal
    networks:
      - ecommerce
    ports:
      - "3000:3000"

  #Seller portal
  seller-portal:
    build:
      context: ../../
      dockerfile: ./docker/frontend/seller-portal/Dockerfile
    container_name: seller-portal
    image: ecommerce/seller-portal
    networks:
      - ecommerce
    ports:
      - "3001:3000"

  #Website
  website:
    build:
      context: ../../
      dockerfile: ./docker/frontend/website/Dockerfile
    container_name: website
    image: ecommerce/website
    networks:
      - ecommerce
    ports:
      - "3002:3000"

  # Metrics, Logging and Tracing
  loki:
    image: grafana/loki
    container_name: loki
    networks:
      - ecommerce
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    networks:
      - ecommerce
    ports:
      - "3200:3000"
    depends_on:
      - loki
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ADMIN_USER=samarth
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ../../config/grafana:/etc/grafana/provisioning
      - ../../config/grafana/dashboards:/var/lib/grafana/dashboards

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - ecommerce
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ../../config/prometheus:/etc/prometheus
networks:
  ecommerce:
    driver: bridge
